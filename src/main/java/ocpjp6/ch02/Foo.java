package ocpjp6.ch02;

/**
 * Created by grzesikl on 06/06/2016.
 */

//Constructors can use any access modifier, including private. (A private constructor means only code within the class itself can instantiate an object of that type, so if the private constructor class wants to allow an instance of the class to be used, the class must provide a static method or variable that allows access to an instance created from within the class.)
//The constructor name must match the name of the class.
//Constructors must not have a return type.
//It’s legal (but stupid) to have a method with the same name as the class, but that doesn’t make it a constructor. If you see a return type, it’s a method rather than a constructor. In fact, you could have both a method and a constructor with the same name—the name of the class—in the same class, and that’s not a problem for Java. Be careful not to mistake a method for a constructor—be sure to look for a return type.
//If you don’t type a constructor into your class code, a default constructor will be automatically generated by the compiler.
//The default constructor is ALWAYS a no-arg constructor.
//If you want a no-arg constructor and you’ve typed any other constructor(s) into your class code, the compiler won’t provide the no-arg constructor (or any other constructor) for you. In other words, if you’ve typed in a constructor with arguments, you won’t have a no-arg constructor unless you type it in yourself!
//Every constructor has, as its first statement, either a call to an overloaded constructor (this()) or a call to the superclass constructor (super()), although remember that this call can be inserted by the compiler.
//If you do type in a constructor (as opposed to relying on the compiler-generated default constructor), and you do not type in the call to super() or a call to this(), the compiler will insert a no-arg call to super() for you, as the very first statement in the constructor.
//A call to super() can be either a no-arg call or can include arguments passed to the super constructor.
//A no-arg constructor is not necessarily the default (i.e., compiler-supplied) constructor, although the default constructor is always a no-arg constructor. The default constructor is the one the compiler provides! While the default constructor is always a no-arg constructor, you’re free to put in your own no-arg constructor.
//You cannot make a call to an instance method, or access an instance variable, until after the super constructor runs.
//Only static variables and methods can be accessed as part of the call to super() or this(). (Example: super(Animal.NAME) is OK, because NAME is declared as a static variable.)
//Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.
//Interfaces do not have constructors. Interfaces are not part of an object’s inheritance tree.
//The only way a constructor can be invoked is from within another constructor. In other words, you can’t write code that actually calls a constructor as follows:


public class Foo {

    int size;
    String name;
    Foo(String name, int size) {
        this.name = name;
        this.size = size;
    }

    Foo(){};

    void doSomething() {
//        Foo(); illegal, The only way a constructor can be invoked is from within another constructor
    }

}
