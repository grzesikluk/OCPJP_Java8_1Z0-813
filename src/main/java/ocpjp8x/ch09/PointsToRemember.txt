If you do not specify any string formatting specifier, the printf() method will not print anything from the given arguments!
Flags such as "-" and “0" make sense only when you specify width with the format specifier string.
You can also print the % character in a format string; however, you need to use an escape sequence for it. In format specifier strings, % is an escape character, which means you need to use %% to print a single %.
You can use the argument index feature (an integer value followed by $ symbol) to explicitly refer to the arguments by their index position. For example, the following prints “world hello” because the order of arguments are reversed:
console.printf("%2$s %1$s %n", "hello", "world");
// $2 refers to the second argument ("world") and
// $1 refers to the first argument ("hello")
The < symbol in a format string supports relative index with which you can reuse the argument matched by the previous format specifier. For example, assuming console is a valid Console object, the following code segment prints “10 a 12”:
console.printf("%d %<x %<o", 10);
// 10 – the decimal value, a – the hexadecimal value of 10, and
// 12 – the octal value of 10
If you do not provide the intended input data type as expected by the format string, then you can get an IllegalFormatConversionException. For instance, if you provide a string instead of an expected integer in your printRow() method implementation, you will get following exception:
Exception in thread "main" java.util.IllegalFormatConversionException:
      d != java.lang.String